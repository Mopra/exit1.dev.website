---
alwaysApply: true
---
# Core Web Vitals & Performance Optimization

## Objective
Ensure all output prioritizes top scores in:
- Core Web Vitals (LCP, FID/INP, CLS)
- Google Lighthouse
- PageSpeed Insights

---

## Performance First

### Largest Contentful Paint (LCP)
- Optimize and lazy-load large images and background visuals
- Serve images in modern formats (WebP/AVIF)
- Use width/height attributes or `aspect-ratio` to reserve space
- Prioritize above-the-fold content in initial render

### Interaction to Next Paint (INP / FID)
- Avoid long tasks (>50ms) in the main thread
- Debounce input handlers (e.g., search bars)
- Use `requestIdleCallback` or web workers for non-urgent tasks
- Avoid blocking JavaScript (minimize heavy libraries)

### Cumulative Layout Shift (CLS)
- Always include `width` and `height` or use `aspect-ratio` for images
- Don’t insert content above existing content unless space is reserved
- Use CSS animations, not layout-shifting JS transitions

---

## React + Vite Specific Optimizations
- Lazy-load non-critical components with `React.lazy` and `Suspense`
- Avoid large `useEffect` chains on first paint
- Use `React.memo`, `useMemo`, and `useCallback` to reduce re-renders
- Tree-shake unused exports and minimize bundle size
- Split code using Vite’s dynamic `import()` and route-based chunks

---

## Image & Asset Optimization
- Use responsive images via `srcSet` or `next/image`-style strategies
- Prefer SVG for icons and illustrations
- Set cache-control headers properly on static assets
- Compress assets using modern tools (e.g., esbuild, imagemin)

---

## Fonts & Icons
- Use `font-display: swap` to avoid layout blocking
- Preload critical fonts
- Use FontAwesome Pro with subset strategy or SVG sprites if needed

---

## Tailwind & CSS
- Purge unused CSS with Tailwind’s JIT mode
- Use `@apply` for consistency and minimal CSS bloat
- Prefer system fonts or preload custom fonts

---

## Network & Loading Strategy
- Minimize third-party scripts and defer non-critical scripts
- Use HTTP/2 or HTTP/3 for faster asset delivery
- Enable Gzip/Brotli compression on server responses
- Use caching headers for static resources

---

## Testing & Monitoring
- Test using Lighthouse and WebPageTest
- Continuously monitor Web Vitals via Google Search Console or Vercel Analytics
- Ensure time-to-interactive < 3s, LCP < 2.5s, CLS < 0.1